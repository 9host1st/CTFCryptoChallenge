from Crypto.Util.number import long_to_bytes as l2b
n = 4267673018937542930064286858784733775186793434799053148661189220463263645520622242015523544119998606173746384062970573426543691782371865066617843477718416155100786495146707748786803266529898510312259905121607110746634002007960528090201641955354646768925879083371496960832018719626346200643065797462381419532184957516600993412928420882839999560994632916966720264711051726878638591395372438737037637910749329956899645265750141087241243150713033654866652998427014149844421158322282855483968718250546270519881225386585204173276850460014270523604134744270673673994533562932193653471922092149094546930398990573156823760891

s = 67591794818278188734442676132093889511406709938732579247463655160810958121523841410993676987877780113242984401867747104118780739208417323440596538904041258695481243777772988787517395160

c = 4161137967217856424492155143854881208639655503566366759989283178137882179113831546922038654128123348528745072799773016007371751189686894830048093083308620015791397250567871876120190485580943317211234988821722073133233332646526587157131645285742410433338059935590241428410388145610000360236744842347589309058513081824417979093064853564624319453761559823390725058829145758004027576242248758681006562755099934255152620120997346689045287190619522354720285158839757845872274829751101487768970893577655127361830380196682317295681190424699683922636893285588605091783735620212585580394494000211879024424941223843641159879161

eList = [163,167,173,179,181,191,197,199]
def coppersmith(shiftbits, k):
    F.<x> = PolynomialRing(Zmod(n))
    einv = inverse_mod(e, n)
    f = (s << shiftbits) + x + (k - 1) * einv
    x0 = f.small_roots(X = 2^shiftbits, beta=0.44, epsilon=1/32)
    return x0

if __name__ == "__main__":
    for bits in range(1023, 1025):
        for e in eList:
            for k in range(1, e):
                shiftbits = bits // 2 - bits // 10
                print("e : " + str(e) + " k : " + str(k))
                x0 = coppersmith(shiftbits, k)
                if len(x0) != 0:
                    x = Integer(x0[0])
                    dp = x + (s << shiftbits)
                    p = (e*dp - 1) // k + 1
                    if p != -1:
                        q = n // p
                        phi = (p - 1) * (q - 1)
                        d = inverse_mod(e, phi)
                        print(l2b(pow(c, d, n)))
                        break
