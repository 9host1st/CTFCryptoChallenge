
# This file was *autogenerated* from the file solve.sage
from sage.all_cmdline import *   # import sage library

_sage_const_67591794818278188734442676132093889511406709938732579247463655160810958121523841410993676987877780113242984401867747104118780739208417323440596538904041258695481243777772988787517395160 = Integer(67591794818278188734442676132093889511406709938732579247463655160810958121523841410993676987877780113242984401867747104118780739208417323440596538904041258695481243777772988787517395160); _sage_const_181 = Integer(181); _sage_const_191 = Integer(191); _sage_const_0 = Integer(0); _sage_const_197 = Integer(197); _sage_const_1025 = Integer(1025); _sage_const_2 = Integer(2); _sage_const_167 = Integer(167); _sage_const_199 = Integer(199); _sage_const_1023 = Integer(1023); _sage_const_163 = Integer(163); _sage_const_10 = Integer(10); _sage_const_173 = Integer(173); _sage_const_4161137967217856424492155143854881208639655503566366759989283178137882179113831546922038654128123348528745072799773016007371751189686894830048093083308620015791397250567871876120190485580943317211234988821722073133233332646526587157131645285742410433338059935590241428410388145610000360236744842347589309058513081824417979093064853564624319453761559823390725058829145758004027576242248758681006562755099934255152620120997346689045287190619522354720285158839757845872274829751101487768970893577655127361830380196682317295681190424699683922636893285588605091783735620212585580394494000211879024424941223843641159879161 = Integer(4161137967217856424492155143854881208639655503566366759989283178137882179113831546922038654128123348528745072799773016007371751189686894830048093083308620015791397250567871876120190485580943317211234988821722073133233332646526587157131645285742410433338059935590241428410388145610000360236744842347589309058513081824417979093064853564624319453761559823390725058829145758004027576242248758681006562755099934255152620120997346689045287190619522354720285158839757845872274829751101487768970893577655127361830380196682317295681190424699683922636893285588605091783735620212585580394494000211879024424941223843641159879161); _sage_const_4267673018937542930064286858784733775186793434799053148661189220463263645520622242015523544119998606173746384062970573426543691782371865066617843477718416155100786495146707748786803266529898510312259905121607110746634002007960528090201641955354646768925879083371496960832018719626346200643065797462381419532184957516600993412928420882839999560994632916966720264711051726878638591395372438737037637910749329956899645265750141087241243150713033654866652998427014149844421158322282855483968718250546270519881225386585204173276850460014270523604134744270673673994533562932193653471922092149094546930398990573156823760891 = Integer(4267673018937542930064286858784733775186793434799053148661189220463263645520622242015523544119998606173746384062970573426543691782371865066617843477718416155100786495146707748786803266529898510312259905121607110746634002007960528090201641955354646768925879083371496960832018719626346200643065797462381419532184957516600993412928420882839999560994632916966720264711051726878638591395372438737037637910749329956899645265750141087241243150713033654866652998427014149844421158322282855483968718250546270519881225386585204173276850460014270523604134744270673673994533562932193653471922092149094546930398990573156823760891); _sage_const_179 = Integer(179); _sage_const_32 = Integer(32); _sage_const_0p44 = RealNumber('0.44'); _sage_const_1 = Integer(1)
from Crypto.Util.number import long_to_bytes as l2b
n = _sage_const_4267673018937542930064286858784733775186793434799053148661189220463263645520622242015523544119998606173746384062970573426543691782371865066617843477718416155100786495146707748786803266529898510312259905121607110746634002007960528090201641955354646768925879083371496960832018719626346200643065797462381419532184957516600993412928420882839999560994632916966720264711051726878638591395372438737037637910749329956899645265750141087241243150713033654866652998427014149844421158322282855483968718250546270519881225386585204173276850460014270523604134744270673673994533562932193653471922092149094546930398990573156823760891 

s = _sage_const_67591794818278188734442676132093889511406709938732579247463655160810958121523841410993676987877780113242984401867747104118780739208417323440596538904041258695481243777772988787517395160 

c = _sage_const_4161137967217856424492155143854881208639655503566366759989283178137882179113831546922038654128123348528745072799773016007371751189686894830048093083308620015791397250567871876120190485580943317211234988821722073133233332646526587157131645285742410433338059935590241428410388145610000360236744842347589309058513081824417979093064853564624319453761559823390725058829145758004027576242248758681006562755099934255152620120997346689045287190619522354720285158839757845872274829751101487768970893577655127361830380196682317295681190424699683922636893285588605091783735620212585580394494000211879024424941223843641159879161 

eList = [_sage_const_163 ,_sage_const_167 ,_sage_const_173 ,_sage_const_179 ,_sage_const_181 ,_sage_const_191 ,_sage_const_197 ,_sage_const_199 ]
def coppersmith(shiftbits, k):
    F = PolynomialRing(Zmod(n), names=('x',)); (x,) = F._first_ngens(1)
    einv = inverse_mod(e, n)
    f = (s << shiftbits) + x + (k - _sage_const_1 ) * einv
    x0 = f.small_roots(X = _sage_const_2 **shiftbits, beta=_sage_const_0p44 , epsilon=_sage_const_1 /_sage_const_32 )
    return x0

if __name__ == "__main__":
    for bits in range(_sage_const_1023 , _sage_const_1025 ):
        for e in eList:
            for k in range(_sage_const_1 , e):
                shiftbits = bits // _sage_const_2  - bits // _sage_const_10 
                print("e : " + str(e) + " k : " + str(k))
                x0 = coppersmith(shiftbits, k)
                if len(x0) != _sage_const_0 :
                    x = Integer(x0[_sage_const_0 ])
                    dp = x + (s << shiftbits)
                    p = (e*dp - _sage_const_1 ) // k + _sage_const_1 
                    if p != -_sage_const_1 :
                        q = n // p
                        phi = (p - _sage_const_1 ) * (q - _sage_const_1 )
                        d = inverse_mod(e, phi)
                        print(l2b(pow(c, d, n)))
                        break

