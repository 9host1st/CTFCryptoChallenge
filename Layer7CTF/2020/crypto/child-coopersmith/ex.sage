from Crypto.Util.number import long_to_bytes as l2b

n = 764560847192553739788767869270171166993220623033328707312817952338377327370509935879384427454261456388991567070900336908128514914767121821152594352369735202005537456002039243699398611599350789937659073178177736102983134040886804902806546128823765996508238152020363218692259591057995327390912890276878612979335758457805004645177962308458933689429575766571656245511130817042046658608572891972142607853689562817711167581813201571196180445908713364381251777888392169
e = 65537
hint = 841307750425120842229727096038912838620494326520512008996730791490163397771417374263667078190134316498194004528072154142315431986990102829359899487514815156946748414737260027073551

c = 531734089614483784056249444090625832159944280366782318486684615916776332074595514846991753497349700609867467751587298598475495955653089868981340439044282258675779133112408644848496404267792097663885800405001510641415428276069025815054852361000057551017327536531397537244528561456305108282200438424590630111797401812861716691951856989273798550725565408828949359107813015034822043462093887120078215213552049144369553533433613425778296192771934832634567926391390097

F.<x> = PolynomialRing(Zmod(n))
f= hint + x * (1 << 600)
f= f.monic()

beta = 2/3
x0 = f.small_roots(X = 2^600, beta=beta)
set_verbose(0)
pq = Integer((x0[0]) * (1<<600) + hint)
p = n // pq
q = n // (p^2)

phi = (p - 1) * p * (q - 1)

d = inverse_mod(e, phi)

print(l2b(pow(c, d, n)))
