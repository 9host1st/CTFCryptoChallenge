from Crypto.Util.number import *
from math import gcd
key = {"e":65537,"n":27451162557471435115589774083548548295656504741540442329428952622804866596982747294930359990602468139076296433114830591568558281638895221175730257057177963017177029796952153436494826699802526267315286199047856818119832831065330607262567182123834935483241720327760312585050990828017966534872294866865933062292893033455722786996125448961180665396831710915882697366767203858387536850040283296013681157070419459208544201363726008380145444214578735817521392863391376821427153094146080055636026442795625833039248405951946367504865008639190248509000950429593990524808051779361516918410348680313371657111798761410501793645137,"cf":113350138578125471637271827037682321496361317426731366252238155037440385105997423113671392038498349668206564266165641194668802966439465128197299073392773586475372002967691512324151673246253769186679521811837698540632534357656221715752733588763108463093085549826122278822507051740839450621887847679420115044512}


e = key["e"]
n = key["n"]
cf = key["cf"]
k = 0
for i in range(1, e):
    if((e*n - 1) % i == 0 and ((e*n - 1) // i).bit_length() <= 2048):
        k = i
        break

phi = (e*n - 1) // i

pmul = cf* phi - cf + 1
p = pmul
i = 2
while not isPrime(p):
    pmuli = pow(i, phi, p) - 1
    p = gcd(p, pmuli)
    i += 1

q = pow(cf, -1, p)

n_real = p * q
enc = 17320751473362084127402636657144071375427833219607663443601124449781249403644322557541872089652267070211212915903557690040206709235417332498271540915493529128300376560226137139676145984352993170584208658625255938806836396696141456961179529532070976247738546045494839964768476955634323305122778089058798906645471526156569091101098698045293624474978286797899191202843389249922173166570341752053592397746313995966365207638042347023262633148306194888008613632757146845037310325643855138147271259215908333877374609302786041209284422691820450450982123612630485471082506484250009427242444806889873164459216407213750735305784
print(long_to_bytes(pow(enc, n, n_real)))
